Single File Programming Question
==============================
1. Problem Statement
==============================
Slide the pattern over the text one by one and check for a match. If a match is found, 
then slide by 1 again to check for subsequent matches.  Given a text txt[0..n-1] 
and a pattern pat[0..m-1], write a function search(char pat[], char txt[]) that 
prints all occurrences of pat[] in txt[]. You may assume that n > m. 

Input format :
The first line of input consists of the string.

The second line of input consists of the pattern.

Output format :
The output prints the indices at which the pattern is found.



Refer to the sample output for the formatting specifications.

Code constraints :
2 < length of the pattern < length of the string < 100

Sample test cases :
Input 1 :
AABAACAADAABAAABAA
AABA
Output 1 :
Pattern found at index 0
Pattern found at index 9
Pattern found at index 13
Input 2 :
UVWXYZABWXYZABCWXYZ
XYZ
Output 2 :
Pattern found at index 3
Pattern found at index 9
Pattern found at index 16


=============================
          Program
=============================
#include<bits/stdc++.h>
using namespace std;
void search(const string &txt,const string &pat){
    int M=pat.length();
    int N=txt.length();
    for(int i=0;i<=N-M;i++){
        int j;
        for( j=0;j<M;j++){
            if(txt[i+j]!=pat[j]){
                break;
            }
        }
        if(j==M){
            cout<<"Pattern found at index "<<i<<endl;
        }
    }
}
int main(){
    string txt,pat;
    getline(cin,txt);
    getline(cin,pat);
    search(txt,pat);
    return 0;
}


Single File Programming Question
================================
2. Problem Statement
================================

Given text string with length n and a pattern with length m, the task is
to prints all occurrences of pattern in text.

Note: You may assume that n > m.

Use zero-based indexing while returning the indices. 

Example:

Input:  text =“THIS IS A TEST TEXT”, pattern = “TEST”

Output: Pattern found at index 10



Input:  text = “AABAACAADAABAABA”, pattern = “AABA”

Output: Pattern found at index 0, Pattern found at index 9, Pattern found at index 12





Input format :
The first line of input consists of a string txt, in which the pattern is to be searched.

The second line of input consists of a string pat, the pattern that needs to be found in the text.

Output format :
For each occurrence of the pattern in the text, print "Pattern found at index X" 
in a new line, where X the indices where the pattern is found within the text string.



Refer to the sample output for the formatting specifications.

Code constraints :
The text and the pattern will only contain uppercase and lowercase English letters.

1 ≤ length of txt ≤ 50

1 ≤ length of pat ≤ 10

Sample test cases :
Input 1 :
THIS IS A TEST TEXT
TEST
Output 1 :
Pattern found at index 10
Input 2 :
AABAACAADAABAABA
AABA
Output 2 :
Pattern found at index 0
Pattern found at index 9
Pattern found at index 12
Input 3 :
agd
g
Output 3 :
Pattern found at index 1

=============================
           Program
=============================
#include<bits/stdc++.h>
using namespace std;
void search(const string &txt,const string &pat){
    int M=pat.length();
    int N=txt.length();
    for(int i=0;i<=N-M;i++){
        int j;
        for(j=0;j<M;j++){
            if(txt[i+j]!=pat[j]){
                break;
            }
        }
        if(j==M){
            cout<<"Pattern found at index "<<i<<endl;
        }
    }
}
int main(){
    string txt,pat;
    getline(cin,txt);
    getline(cin,pat);
    search(txt,pat);
    return 0;
}
