Single File Programming Question
================================
     1.Problem Statement
================================
In the ancient kingdom of Numeria, there exists a legendary artifact known as the Prime Relic. This relic
is the key to unlocking hidden knowledge preserved by the old scholars. However, the relic only reveals 
its secrets when presented with a specific combination of prime numbers.

According to legend, the relic works with two magical numbers:

P: a threshold prime number. Only prime numbers strictly greater than P are allowed.

S: the exact sum that the selected primes must total to.

The scholars have placed a magical constraint:

Each prime number can be used at most once.

All chosen prime numbers must be strictly greater than P and must sum up to S.

If there are multiple valid combinations, all must be found and listed.

Input format :
The first line of input contains the integer P, representing the threshold prime number.

The second line of input contains an integer S, representing the exact sum.

Output format :
The output prints,

Valid combinations:

<combination>

Each combination is printed on a new line, with space-separated prime numbers in ascending order.

Refer to the sample output for formatting specifications.

Code constraints :
1 ≤ P < S

Sample test cases :
Input 1 :
3
10
Output 1 :
Valid combinations:
3 7 
Input 2 :
5
50
Output 2 :
Valid combinations:
7 11 13 19 
7 43 
13 37 
19 31 
====================================
         Program
====================================
#include<bits/stdc++.h>
using namespace std;
bool isprime(int num){
    if(num<2){
        return false;
    }
    for(int i=2;i*i<=num;i++){
        if(num%i==0){
            return false;
        }
    }
    return true;
}
int findPrime(int p,int s,int primes[]){ //if we use vector method -> vector<int>&primes
    int count=0;
    for(int i=p;i<=s;i++){
        if(isprime(i)){
            primes[count++]=i;
        }
    }
    return count;
}
void findCombinations(int primes[],int size,int target,int index,int current[],int currentlen,bool &found){
    if(target==0){
        found = true;
        for(int i=0;i<currentlen;i++){
            cout<<current[i]<<" ";
        }
        cout<<endl;
        return;
    }
    for(int i=index;i<size;i++){
        if(primes[i] > target){
            break;
        }
        current[currentlen]=primes[i];
        findCombinations(primes,size,target-primes[i],i+1,current,currentlen+1,found);
    }
}
int main(){
    int p,s;
    cin>>p;
    cin>>s;
    int primes[99];
    int primecount = findPrime(p,s,primes);
    if(primecount == 0){
        cout<<"No valid combinations"<<endl;
        return 0;
    }
    int current[100];
    bool found = false;
    cout<<"Valid combinations:"<<endl;
    findCombinations(primes,primecount,s,0,current,0,found);
    if(found == false){
        cout<<"No valid combinations"<<endl;
    }
    return 0;
}


Single File Programming Question
===================================
       2.Problem Statement
===================================
In the distant future, humanity discovers an ancient alien artifact buried deep beneath the surface of Mars—a mysterious
AI core known as the Prime Code, left behind by the advanced civilization of Zenthari. According to deciphered 
fragments, the Prime Code holds the coordinates to hidden knowledge across the galaxy. However, to activate it,
explorers must provide a specific combination of prime numbers. 

These numbers must be strictly greater than a given threshold value P and must add up to an exact value S, 
known as the Sum Seal. The artifact enforces strict rules—each prime can be used only once, and all valid combinations 
must be revealed to unlock its secrets. As the lead mission engineer, you are tasked with writing a decoding algorithm
to find all such combinations. Only then will the Prime Code unlock the next chapter in mankind's journey through the stars.

Input format :
The first line of input contains the integer P, representing the threshold prime number.

The second line of input contains an integer S, representing the exact sum.

Output format :
The output prints,

If valid combination exists,

Valid combinations:

<combination>

else prints,

Valid combinations:

No valid combination found.

Each combination is printed on a new line, with space-separated prime numbers in ascending order.

Refer to the sample output for formatting specifications.

Code constraints :
1 ≤ P < S

Sample test cases :
Input 1 :
5
80
Output 1 :
Valid combinations:
5 7 31 37 
5 11 17 47 
5 11 23 41 
5 13 19 43 
7 11 19 43 
7 13 17 43 
7 13 19 41 
7 13 23 37 
7 13 29 31 
7 17 19 37 
7 19 23 31 
7 73 
11 13 19 37 
11 17 23 29 
13 17 19 31 
13 67 
19 61 
37 43 
Input 2 :
25
65
Output 2 :
Valid combinations:
No valid combination found.

=====================================
          Program
=====================================
#include<bits/stdc++.h>
using namespace std;
bool isprime(int num){
    if(num<2){
        return false;
    }
    for(int i=2;i*i<=num;i++){
        if(num%i==0){
            return false;
        }
    }
    return true;
}
int findPrime(int p,int s,int primes[]){
    int count=0;
    for(int i=p;i<=s;i++){
        if(isprime(i)){
            primes[count++] = i;
        }
    }
    return count;
}
void findCombinations(int primes[],int size,int target,int index,int current[],int currentlen,bool &found){
    if(target==0){
        found=true;
        for(int i=0;i<currentlen;i++){
            cout<<current[i]<<" ";
        }
        cout<<endl;
        return;
    }
    for(int i=index;i<size;i++){
        if(primes[i]>target){
            break;
        }
        current[currentlen]=primes[i];
        findCombinations(primes,size,target-primes[i],i+1,current,currentlen+1,found);
    }
}
int main(){
    int p,s;
    cin>>p>>s;
    int primes[99];
    int primecount = findPrime(p,s,primes);
    if(primecount==0){
        cout<<"No valid combination found."<<endl;
        return 0;
    }
    int current[100];
    bool found = false;
    cout<<"Valid combinations:"<<endl;
    findCombinations(primes,primecount,s,0,current,0,found);
    if(found==false){
        cout<<"No valid combination found."<<endl;
    }
    return 0;
}
