Single File Programming Question
====================================
         1.Problem Statement
====================================

Lucy has a set of integers, and she is interested in finding out how many subsets from this set
sum up to a specific target number. The program should efficiently calculate the number of subsets
that sum up to a given target sum. Additionally, after finding the count of subsets, a small
mathematical operation is performed on the result:

If the count of subsets is even, it should be multiplied by 3.
If the count is odd, 7 should be added to the count.

Your task is to help Lucy implement the solution and perform the required operation on the result.

Example:

Input

4

1 3 5 2

6



Output

2



Explanation:

Subset1= {1,5}, Subset2= {1,3,2}. 1+5 = 6, 1+3+2 = 6. 

The obtained result is even, so multiply it by 3 (2 * 3 = 6)

Input format :
The first line of input consists of a single integer n, representing the number of elements in the set.

The second line consists of an integer, representing the elements of the set. These integers are space-separated.

The third line consists of a single integer, representing the target sum for which the subsets need to sum up.

Output format :
The first line of output prints a single integer that represents the number of subsets whose sum equals the target sum.

The second line prints the result after performing the operation based on whether the subset count is even or odd.



Refer to the sample output for the formatting specifications.

Code constraints :
In this scenario, the given test cases will fall under the following constraints:

1 ≤ n ≤ 10

1 ≤ elements of the set ≤ 100

Sample test cases :
Input 1 :
4
1 3 5 2
6
Output 1 :
2
6
Input 2 :
6
10 20 30 40 50 100
70
Output 2 :
3
10
Input 3 :
3
1 2 1
3
Output 3 :
2
6

================================
          Program
================================
#include<bits/stdc++.h>
using namespace std;
int SubsetCount = 0;
void findCount(int set[],int n,int target,int index,int currsum,bool include[]){
    if(index == n){
        if(target == currsum){
            SubsetCount++;
            return;
        }
    }
    if(index==n || currsum >target){
        return;
    }
    include[index]=true;
    findCount(set,n,target,index+1,currsum+set[index],include);
    
    include[index]=false;
    findCount(set,n,target,index+1,currsum,include);
}
int main(){
    int n;
    cin>>n;
    int set[n];
    for(int i=0;i<n;i++){
        cin>>set[i];
    }
    int target;
    cin>>target;
    bool include[n] = {false};
    findCount(set,n,target,0,0,include);
    cout<<SubsetCount<<endl;
    if(SubsetCount%2==0){
        cout<<3*SubsetCount<<endl;
    }else{
        cout<<SubsetCount+7<<endl;
    }
    return 0;
}


Single File Programming Question
====================================
        2.Problem Statement
====================================
Mythili has a list of item prices in her store, and a customer has a gift card with a certain balance. 
The task is to determine if there exists a combination of items whose total price matches the gift card balance.
If such a combination exists, print the prices of the items. If there are multiple valid combinations,
print the first occurring pair. If no such combination exists, print "No combination of items."

Additionally, before printing the item combination, the program must first calculate and print the value
of the expression target * 2 - 1 where the target is the gift card balance.

Write a function that takes item prices, the number of available items, and the gift card balance as input.
The function should determine if there's a valid combination of items whose prices sum up to the gift card balance. 
If a valid combination exists, it should print the prices of the first occurring combination. Otherwise, print "No combination of items."

Input format :
The first line of input consists of an integer, representing the number of items in the store.

The second line consists of an array of integers separated by a space, representing the prices of the items.

The last line consists of an integer representing the customer's gift card balance.

Output format :
The first line of output prints the result of the mathematical formula target * 2 - 1.

If there exists a combination of items whose prices sum up to the gift card balance, then print this combination.

If no such combination exists, print "No combination of items".



Refer to the sample output for the formatting specifications.

Code constraints :
In this scenario, the given test cases will fall under the following constraints:

1 ≤ number of items ≤ 5

1 ≤ price ≤ 50

1 ≤ gift card balance ≤ 150

Sample test cases :
Input 1 :
3
10 20 30
50
Output 1 :
99
20 30
Input 2 :
4
10 15 20 30
58
Output 2 :
115
No combination of items
Input 3 :
4
3 5 7 5
10
Output 3 :
19
3 7

======================================
             Program
======================================
#include<bits/stdc++.h>
using namespace std;
bool found = false;
void findCombination(int weights[],int n,int target,int index,int currsum,bool include[]){
    if(found){
        return;
    }
    if(target == currsum){
        for(int i=0;i<n;i++){
            if(include[i]){
                cout<<weights[i]<<" ";
            }
        }
        cout<<endl;
        found = true;
        return;
    }
    if(index == n || currsum > target){
        return;
    }
    include[index] = true;
    findCombination(weights,n,target,index+1,currsum+weights[index],include);
    
    include[index] = false;
    findCombination(weights,n,target,index+1,currsum,include);
}
int main(){
    int n;
    cin>>n;
    int weights[n];
    for(int i=0;i<n;i++)
        cin>>weights[i];
    int target;
    cin>>target;
    
    cout<<target*2-1<<endl;
    bool include[n]= {false};
    for(int i=0;i<n && !found;i++){
        for(int j=i+1;j<n & !found;j++){
            if(weights[i]+weights[j] == target){
                cout<<weights[i]<<" "<<weights[j]<<endl;
                found = true;
            }
        }
    }
    findCombination(weights,n,target,0,0,include);
    if(found==false){
        cout<<"No combination of items"<<endl;
    }
    return 0;
}
