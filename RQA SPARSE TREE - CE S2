Single File Programming Question
=================================
      1.Problem Statement
=================================
You are managing a retail store and want to analyze your daily sales over the past few weeks. You've 
recorded the total sales for each day in an array. Your goal is to quickly find out the total sales within a range of days for reporting or planning.

To answer this efficiently, even for large datasets, you decide to preprocess the data using a Sparse Table and answer these queries in logarithmic time.

Input format :
The first line of the input contains a single integer N, representing the number of days for which the store has recorded sales data.
The second line contains N space-separated integers, where each integer represents the total sales on day i, for i = 0 to N−1.
The third line contains a single integer Q, representing the number of queries to process.
Each of the next Q lines contains two integers L and R, representing the inclusive range of days for which the total sales are to be computed.

Output format :
For each query, the output prints a single line containing one integer on a new line representing the total sales from day L to day R, inclusive.
Refer to the sample output for the formatting specifications.

Code constraints :
The given test cases fall under the following constraints:
1 ≤ N ≤ 20
1 ≤ Q ≤ 20
0 ≤ A[I] ≤ 100
0 ≤ L ≤ R < N

Sample test cases :
Input 1 :
6
2 4 7 1 3 5
3
1 3
0 5
2 2
Output 1 :
12
22
7
Input 2 :
8
5 3 8 6 2 9 1 7
4
0 3
2 5
4 7
3 3
Output 2 :
22
25
19
6

====================================
            Program
====================================
#include <bits/stdc++.h>
using namespace std;
int RSQ(int L, int R, vector<vector<int>> &st) {
    int sum = 0;
    int len = R - L + 1;
    int j = log2(len);
    for (int k = j; k >= 0; k--) {
        if ((int)pow(2, k) <= len) {
            sum += st[L][k];
            L += (int)pow(2, k);
            len -= (int)pow(2, k);
        }
    }
    return sum;
}

int main() {
    int N;
    cin >> N;
    vector<int> sales(N);
    for (int i = 0; i < N; i++)
        cin >> sales[i];

    int LOG = floor(log2(N)) + 1;
    vector<vector<int>> st(N, vector<int>(LOG));

    for (int i = 0; i < N; i++)
        st[i][0] = sales[i];

    for (int j = 1; (int)pow(2, j) <= N; j++) {
        for (int i = 0; i + (int)pow(2, j) <= N; i++) {
            st[i][j] = st[i][j - 1] + st[i + (int)pow(2, j - 1)][j - 1];
        }
    }

    int Q;
    cin >> Q;
    while (Q--) {
        int L, R;
        cin >> L >> R;
        int totalSales = RSQ(L, R, st);
        cout << totalSales << endl;
    }

    return 0;
}


Single File Programming Question
=================================
      2.Problem Statement
=================================
You are analyzing the performance of your retail store by evaluating the average daily sales over
different periods. You’ve recorded the daily total sales in an array. For business decisions, you are
given multiple queries, each asking whether the average sales between day L and R (inclusive) meet or exceed a certain threshold T.

To ensure efficient processing of multiple queries on large data, you decide to preprocess the data 
using a Sparse Table to compute range sums and then use that to compute averages for each query.

Input format :
The first line contains an integer N, representing the number of days the store has recorded sales data.
The second line contains N space-separated integers, where each integer represents the total sales on day i, from day 0 to N−1.
The third line contains an integer Q, representing the number of evaluation queries.
Each of the next Q lines contains two integers, L and R, representing the inclusive range of days, 
and a third integer T, representing the sales average threshold for that query.

Output format :
For each query, the output prints "YES" if the average sales from day L to R is greater than or equal to T, otherwise print "NO" on a new line.

Refer to the sample output for the formatting specifications.

Code constraints :
The given test cases fall under the following constraints:
1 ≤ N ≤ 20
1 ≤ Q ≤ 20
0 ≤ A[i] ≤ 100
0 ≤ L ≤ R < N
0 ≤ T ≤ 105

Sample test cases :
Input 1 :
6
200 350 150 400 100 300
3
0 2 233
1 4 250
2 5 250
Output 1 :
YES
YES
NO
Input 2 :
8
100 200 300 400 500 600 700 800
4
0 3 250
2 5 450
1 6 400
4 7 650
Output 2 :
YES
YES
YES
YES

==================================
            Program
==================================
#include <bits/stdc++.h>
using namespace std;
int RSQ(int L, int R, vector<vector<int>> &st) {
    int sum = 0;
    int len = R - L + 1;
    int j = log2(len);
    for (int k = j; k >= 0; k--) {
        if ((int)pow(2, k) <= len) {
            sum += st[L][k];
            L += (int)pow(2, k);
            len -= (int)pow(2, k);
        }
    }
    return sum;
}

int main() {
    int N;
    cin >> N;
    vector<int> sales(N);
    for (int i = 0; i < N; i++)
        cin >> sales[i];

    int LOG = floor(log2(N)) + 1;
    vector<vector<int>> st(N, vector<int>(LOG));

    for (int i = 0; i < N; i++)
        st[i][0] = sales[i];

    for (int j = 1; (int)pow(2, j) <= N; j++) {
        for (int i = 0; i + (int)pow(2, j) <= N; i++) {
            st[i][j] = st[i][j - 1] + st[i + (int)pow(2, j - 1)][j - 1];
        }
    }

    int Q;
    cin >> Q;
    while (Q--) {
        int L, R, T;
        cin >> L >> R >> T;
        int total = RSQ(L, R, st);
        int len = R - L + 1;
        double avg = (double)total / len;
        if (avg >= T)
            cout << "YES" << endl;
        else
            cout << "NO" << endl;
    }

    return 0;
}





