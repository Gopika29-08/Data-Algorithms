Single File Programming Question
===================================
      1.Problem Statement
===================================
Consider a rat placed at (0, 0) in a square matrix of order N*N. It has to reach the destination at
(N – 1, N – 1). Find all possible paths that the rat can take to reach from source to destination.
The directions in which the rat can move are ‘U'(up), ‘D'(down), ‘L’ (left), and ‘R’ (right). 
Value 0 at a cell in the matrix represents that it is blocked and the rat cannot move to it while 
value 1 at a cell in the matrix represents that the rat can travel through it. Return the list of paths in lexicographically increasing order.

Note: In a path, no cell can be visited more than one time. If the source cell is 0, the rat cannot move to any other cell.


Example 1


Input:

N = 4

m[][] =

{{1, 0, 0, 0},

{1, 1, 0, 1},

{1, 1, 0, 0},

{0, 1, 1, 1}}

Output:

DDRDRR DRDDRR

Explanation:

The rat can reach the destination at (3, 3) from (0, 0) by two paths - DRDDRR and DDRDRR,
when printed in sorted order we get DDRDRR DRDDRR.


Example 2



Input:

N = 2

m[][] = 

{{1, 0},

{1, 0}}

Output:

-1

Explanation:

No path exists and the destination cell is blocked.

Input format :
The first line of input contains an integer n, representing the size of the maze.

The next n lines each contain n space-separated integers, representing the maze.

Output format :
If at least one path is found, print all valid paths as space-separated strings.

If no path is found, prints -1.



Refer to the sample output for the formatting specifications.

Code constraints :
In this scenario, the given test cases will fall under the following constraints:

2 ≤ N ≤ 5

0 ≤ m[i][j] ≤ 1

The initial and final cell will always be 1.

Sample test cases :
Input 1 :
4
1 0 0 0
1 1 0 1
1 1 0 0
0 1 1 1 
Output 1 :
DDRDRR DRDDRR
Input 2 :
2
1 0
1 0
Output 2 :
-1
Input 3 :
3
1 1 1
0 1 0
0 1 1
Output 3 :
RDDR

=================================
        Program
=================================
#include<iostream>
#include<string>
#include<vector>
#include<algorithm>
using namespace std;
const string direction = "DLRU";
int dr[] = {1,0,0,-1};
int sc[] = {0,-1,1,0};

bool issafe(int row, int col,int n,vector<vector<int>> &maze){
    return row>=0 && row<n && col>=0 && col<n && maze[row][col] ==1;
}
void findPath(int row,int col,int n,vector<string>&result,string currentpath,vector<vector<int>> &maze){
    if(row==n-1 && col==n-1){
        result.push_back(currentpath);
        return ;
    }
    maze[row][col] = 0;
    for(int i=0;i<4;i++){
        int nextrow = row +dr[i];
        int nextcol = col +sc[i];
        if(issafe(nextrow,nextcol,n,maze)){
            currentpath.push_back(direction[i]);
            findPath(nextrow,nextcol,n,result,currentpath,maze);
            currentpath.pop_back();
        }
    }
    maze[row][col]=1;
}
int main(){
    int n;
    cin>>n;
    vector<vector<int>>maze(n,vector<int>(n));
    for(int i=0;i<n;i++){
        for(int j=0;j<n;j++){
            cin>>maze[i][j];
        }
    }
    vector<string>result;
    string currentpath;
    if(maze[0][0]!=0 && maze[n-1][n-1]!=0){
        findPath(0,0,n,result,currentpath,maze);
    }
    if(result.empty()){
        cout<<"-1"<<endl;
    }else{
        sort(result.begin(),result.end());
    }
    for(size_t i=0;i<result.size();i++){
        cout<<result[i];
        if(i!=result.size()-1)
            cout<<" ";
    }
    cout<<endl;
    return 0;
}

Single File Programming Question
====================================
       2.Problem Statement
====================================


Imagine a small robot mouse is placed in a square maze inside a lab. The maze is made up of N x N tiles,
where each tile can either be open (marked as 1) or blocked (marked as 0). The robot starts at the 
top-left corner of the maze — this is like the entrance of the lab. Its goal is to reach the bottom-right corner, which is the exit.

However, the robot can only move in one of four directions at a time — forward (down), right, backward (up),
or left — just like moving along a grid of hallways. It cannot move diagonally or go through walls (tiles marked with 0).

Your task is to help this robot find a valid route from the entrance to the exit using only the open
paths (1). If a way exists, show the path; if not, indicate that it's trapped in the maze.

Write a program for the same.

Example

Input

4

1 0 0 0

1 1 0 1

0 1 0 0

1 1 1 1

Output

1 0 0 0 

1 1 0 0 

0 1 0 0 

0 1 1 1 

Explanation

Mouse can reach destination using following path i.e. [0][0] -> [1][0] -> [1][1] -> [2][1] -> [3][1] ->  [3][2] -> [3][3] .

Input format :
The first line of the input consists of the value of n.

Output format :
If a valid path is found, print the solution matrix showing the path using 1s and the rest as 0s.

Each row should be printed on a new line.

Each number in a row should be separated by a single space.

No extra spaces at the end of each line.

If no path exists, print: "No path found"


Refer to the sample output for the formatting spec

Sample test cases :
Input 1 :
4
1 0 0 0
1 1 0 1
0 1 0 0
1 1 1 1
Output 1 :
1 0 0 0 
1 1 0 0 
0 1 0 0 
0 1 1 1 
Input 2 :
4
1 0 1 0
1 0 0 0
1 1 1 0
1 1 1 1
Output 2 :
1 0 0 0 
1 0 0 0 
1 0 0 0 
1 1 1 1 
Input 3 :
3
1 1 0
0 1 0
1 0 1 
Output 3 :
No path found

===================================
          Program
===================================
#include<bits/stdc++.h>
using namespace std;
int dx[4] = {1,0,-1,0};
int dy[4] = {0,1,0,-1};
bool issafe(int x,int y,int n,vector<vector<int>> &maze,vector<vector<int>>sol){
    return (x>=0 && x<n && y>=0 && y<n && maze[x][y]==1 && sol[x][y]==0);
}
bool solveMaze(int x,int y,int n,vector<vector<int>>&maze , vector<vector<int>>&sol){
    if(x==n-1 && y==n-1  && maze[x][y]==1){
        sol[x][y]=1;
        return true;
    }
    if(issafe(x,y,n,maze,sol)){
        sol[x][y] = 1;
        for(int i=0;i<4;i++){
            int nx = x+dx[i];
            int ny = y+dy[i];
            if(solveMaze(nx,ny,n,maze,sol))
                return true;
        }
        sol[x][y]=0;
    }
    return false;
}
int main(){
    int n;
    cin>>n;
    vector<vector<int>> maze(n, vector<int>(n));
    vector<vector<int>> sol(n,vector<int>(n,0));
    for(int i=0;i<n;i++){
        for(int j=0;j<n;j++){
            cin>>maze[i][j];
        }
    }
    if(solveMaze(0,0,n,maze,sol)){
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                cout<<sol[i][j]<<" ";
            }
            cout<<"\n";
        }
    }else{
        cout<<"No path found";
    }
    return 0;
}
