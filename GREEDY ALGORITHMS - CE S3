Single File Programming Question
=================================
      1.Problem Statement
=================================
Embark on an adventure with Jake, a computer science enthusiast, as he explores the world of algorithms. 
Jake is working on a program to uncover the mysteries of chromatic numbers in undirected graphs. 

Using an adjacency matrix, his program aims to find the chromatic number - the smallest number of colors needed
to color vertices without having neighboring vertices share the same color.

Your role is to help Jake develop a program that efficiently calculates the chromatic number of an undirected graph. 

Input format :
The first line contains an integer v, representing the number of vertices in the graph.
The next v lines contain the adjacency matrix of the graph, where each line contains v space-separated integers (0 or 1).

Output format :
The output prints "Chromatic Number of the graph is: " followed by an integer representing the chromatic number of the graph.

Refer to the sample output for the formatting specifications.

Code constraints :
1 ≤ v ≤ 50

Sample test cases :
Input 1 :
4
0 1 1 1
1 0 1 0
1 1 0 1
1 0 1 0
Output 1 :
Chromatic Number of the graph is: 3
Input 2 :
5
0 1 0 1 0
1 0 1 0 1
0 1 0 1 0
1 0 1 0 1
0 1 0 1 0
Output 2 :
Chromatic Number of the graph is: 2
Input 3 :
5
0 1 1 0 0
1 0 1 1 0
1 1 0 1 1
0 1 1 0 1
0 0 1 1 0
Output 3 :
Chromatic Number of the graph is: 3

================================
         Program
=================================
#include<bits/stdc++.h>
using namespace std;
int main(){
    int v;
    cin>>v;
    vector<vector<int>>graph(v, vector<int>(v));
    for(int i=0;i<v;i++){
        for(int j=0;j<v;j++){
            cin>>graph[i][j];
        }
    }
    vector<int>result(v ,-1);
    result[0] =0;
    vector<bool> available(v,false);
    for(int u=1;u<v;u++){
        for(int i=0;i<v;i++){
            if(graph[u][i]==1 && result[i]!=-1){
                available[result[i]] = true;
            }
        }
        int cr;
        for(cr=0;cr<v;cr++){
            if(!available[cr])
                break;
        }
        result[u] = cr;
        for(int i=0;i<v;i++){
            if(graph[u][i]==1 && result[i]!=-1){
                available[result[i]]=false;
            }
        }
    }
    int ChromaticNum = 0;
    for(int i=0;i<v;i++){
        ChromaticNum = max(ChromaticNum, result[i]+1);
    }
    cout<<"Chromatic Number of the graph is: "<<ChromaticNum;
    return 0;
}

Single File Programming Question
==================================
       2.Problem Statement
==================================
Amy is developing a program that takes an adjacency matrix as input, representing an undirected graph. 
The goal is to determine the chromatic number of the graph, number of a graph is the minimum number of 
colors needed to color the vertices of the graph in such a way that no two adjacent vertices share the same color.
Help Amy with the practical implementation of chromatic numbers, understanding how the algorithm efficiently 
assigns colors to vertices to ensure adjacent vertices have distinct colors. 

Input format :
The first line contains an integer v, representing the number of vertices in the graph.
The next v lines contain the adjacency matrix of the graph, where each line contains v space-separated integers (0 or 1).

Output format :
The output prints "Chromatic Number of the graph is: " followed by an integer representing the chromatic number of the graph.

Refer to the sample output for the formatting specifications.

Code constraints :
1 ≤ v ≤ 50

Sample test cases :
Input 1 :
4
0 1 1 1
1 0 1 0
1 1 0 1
1 0 1 0
Output 1 :
Chromatic Number of the graph is: 3
Input 2 :
5
0 1 0 1 0
1 0 1 0 1
0 1 0 1 0
1 0 1 0 1
0 1 0 1 0
Output 2 :
Chromatic Number of the graph is: 2
Input 3 :
5
0 1 1 0 0
1 0 1 1 0
1 1 0 1 1
0 1 1 0 1
0 0 1 1 0
Output 3 :
Chromatic Number of the graph is: 3

==============================
         Program
===============================
#include<bits/stdc++.h>
using namespace std;
int main(){
    int v;
    cin>>v;
    vector<vector<int>>graph(v, vector<int>(v));
    for(int i=0;i<v;i++){
        for(int j=0;j<v;j++){
            cin>>graph[i][j];
        }
    }
    vector<int>color(v,-1);
    color[0]=0;
    vector<bool>available(v,false);
    for(int u=1;u<v;u++){
        for(int i=0;i<v;i++){
            if(graph[u][i] && color[i]!=-1){
                available[color[i]]=true;
            }
        }
        int cr;
        for(cr =0;cr<v;cr++){
            if(!available[cr])
                break;
        }
        color[u]=cr;
        for(int i=0;i<v;i++){
            if(graph[u][i] && color[i]!=-1){
                available[color[i]] = false;
            }
        }
    }
    int ChromaticNum =0;
    for(int i=0;i<v;i++){
        ChromaticNum = max(ChromaticNum, color[i]+1);
    }
    cout<<"Chromatic Number of the graph is: "<<ChromaticNum;
    return 0;
}


