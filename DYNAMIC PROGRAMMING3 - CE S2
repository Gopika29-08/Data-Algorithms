Single File Programming Question
====================================
     1.Problem Statement
====================================
As a senior software engineer, you have been tasked with developing a program that uses dynamic programming
to find the length of the Longest Palindromic Subsequence (LPS) in a given string.

You need to implement a function to find the longest palindromic subsequence that takes a string as input and
returns an integer representing the length of the longest palindromic subsequence in the given string.

Input format :
The input consists of a single line containing a string, consisting of English alphabets.

Output format :
The output prints a single integer representing the length of the longest palindromic subsequence in the given string

Refer to the sample output for formatting specifications.

Code constraints :
1 ≤ Length of string ≤ 100

Sample test cases :
Input 1 :
madam
Output 1 :
5
Input 2 :
mam
Output 2 :
3

=====================================
            Program
=====================================
#include<bits/stdc++.h>
using namespace std;
int longestPalindrome(string s){
    int n = s.size();
    string rev = s;
    reverse(rev.begin(),rev.end());
    vector<vector<int>>dp(n+1, vector<int>(n+1,0));
    for(int i=1;i<=n;i++){
        for(int j=1;j<=n;j++){
            if(s[i-1]==rev[j-1]) 
                dp[i][j] = 1+dp[i-1][j-1];
            else
                dp[i][j] = max(dp[i-1][j], dp[i][j-1]);
        }
    }
    return dp[n][n];
}
int main(){
    string s;
    cin>>s;
    cout<<longestPalindrome(s);
    return 0;
}

Single File Programming Question
===================================
      2.Problem Statement
===================================
In biological data analysis or text correction systems, finding the most stable or symmetrical parts of a
sequence is very useful. A palindromic subsequence is a sequence that reads the same forwards and backwards,
but not necessarily contiguous. Your task is to help analyze the stability of a given sequence by identifying its longest palindromic subsequence.

Your Task:
Write a C++ program that reads a string and prints the length of its longest palindromic subsequence.

Input format :
A single line containing a string S

Output format :
A single integer — the length of the longest palindromic subsequence.

Code constraints :
1 ≤ |S| ≤ 1000
S contains only uppercase English letters

Sample test cases :
Input 1 :
AGGTAB
Output 1 :
4
Input 2 :
A
Output 2 :
1

==============================
          Program
==============================
#include<bits/stdc++.h>
using namespace std;
int longestPalindrome(string s){
    int n = s.size();
    string rev = s;
    reverse(rev.begin(), rev.end());
    vector<vector<int>>dp(n+1, vector<int>(n+1,0));
    for(int i=1;i<=n;i++){
        for(int j=1;j<=n;j++){
            if(s[i-1]==rev[j-1])
                dp[i][j] = 1+dp[i-1][j-1];
            else
                dp[i][j] = max(dp[i-1][j], dp[i][j-1]);
        }
    }
    return dp[n][n];
}
int main(){
    string s;
    cin>>s;
    cout<<longestPalindrome(s);
    return 0;
}
