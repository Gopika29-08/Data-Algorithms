Single File Programming Question
===============================
      1.Problem Statement
===============================

You are given a knapsack with a maximum weight capacity of W and n objects. Each object i has a weight c[i] and a 
value v[i]. Your task is to fill the knapsack with objects in such a way that the total value of the objects in 
the knapsack is maximized without exceeding the weight capacity.

Implement a program to solve this problem using a simple greedy algorithm known as the Fractional Knapsack Problem.

Input format :
The first line of input consists of an integer n, representing the number of objects.

The second line of input consists of n integers, separated by a space, representing the weight of the object.

The third line of input consists of n integers, separated by a space, representing the value of the object.

The fourth line of input consists of an integer W, representing the maximum weight capacity of the knapsack.

Output format :
The output displays the following format:

For each step, it should print either:

"Added object X (Rs. Y, ZKg) completely in the bag. Space left: W." if the entire object X is added to the knapsack,
where X is the object number, Rs. Y is the value of the object, ZKg is the weight of the object, 
and W is the remaining capacity of the knapsack as the integers.

"Added P% (Rs. Y, ZKg) of object X in the bag." if only a fraction of object X is added to the knapsack,where P% is the
percentage of the object added, Rs. Y is the value of the object, ZKg is the weight of the object, and X is the object number as the integers.

Finally, it should print "Filled the bag with objects worth Rs. V." where Rs. V is the total value of the 
objects in the knapsack as the float-point numbers.



Refer to the sample output for the formatting specifications.

Code constraints :
1 ≤ n ≤ 10

1 ≤ c[i], v[i] ≤ 150

1 ≤ W ≤ 100

Sample test cases :
Input 1 :
3
10 20 30
60 100 120
50
Output 1 :
Added object 1 (Rs. 60, 10Kg) completely in the bag. Space left: 40.
Added object 2 (Rs. 100, 20Kg) completely in the bag. Space left: 20.
Added 66% (Rs.120, 30Kg) of object 3 in the bag.
Filled the bag with objects worth Rs. 240.00.

================================
       Program
================================
#include<bits/stdc++.h>
using namespace std;
struct item{
    int v;
    int w;
    float d;
    int id;
};
void input(item items[],int size){
    for(int i=0;i<size;i++){
        cin>>items[i].w;
    }
    for(int i=0;i<size;i++){
        cin>>items[i].v;
    }
    for(int i=0;i<size;i++){
        items[i].id = i+1;
    }
}
void bubblesort(item items[],int sizeOfItems){
    for(int i=0;i<sizeOfItems-1;i++){
        for(int j=0;j<sizeOfItems-i-1;j++){
            if(items[j].d < items[j+1].d){
                swap(items[j],items[j+1]);
            }
        }
    }
}
float knapsack(item items[],int sizeOfItems,int R){
    for(int i=0;i<sizeOfItems;i++){
        items[i].d=(float)items[i].v/items[i].w;
    }
    bubblesort(items,sizeOfItems);
    float total = 0.0;
    int remaining = R;
    for(int i=0;i<sizeOfItems;i++){
        if(remaining == 0)
            break;
        if(items[i].w<=remaining){
            total+=items[i].v;
            remaining-=items[i].w;
            cout<<"Added object "<<items[i].id<<" (Rs. "<<items[i].v<<", "
            <<items[i].w<<"Kg) completely in the bag. Space left: "<<remaining<<"."<<endl;
        }else{
            float fraction =(float)remaining/items[i].w;
            total+=fraction*items[i].v;
            int percent = (int)(fraction*100);
            cout<<"Added "<<percent<<"% (Rs."<<items[i].v<<", "<<items[i].w
            <<"Kg) of object "<<items[i].id<<" in the bag."<<endl;
        remaining =0;
        }
    }
    return total;
}
int main(){
    int n;
    cin>>n;
    item items[20];
    input(items,n);
    int R;
    cin>>R;
    float maxValue = knapsack(items,n,R);
    cout<<fixed<<setprecision(2)<<"Filled the bag with objects worth Rs. "<<maxValue<<"."<<endl;
    return 0;
}

Single File Programming Question
===================================
       2.Problem Statement
===================================

Alice wants to solve the fractional knapsack problem using a program. She has a fixed list of 4 items, 
each with a certain value (v) and weight (w). Alice's backpack has a limited weight capacity (W).

The objective is to implement a program that determines the maximum total value of items Alice can carry in her backpack.

Input format :
The first four lines of input consists of two integers v and w, representing the value and weight of the item separated by space.

The last line consists of an integer W, representing the weight capacity of Alice's backpack.

Output format :
The first line displays the integers, representing the values of the items, separated by a space.

The second line displays the integer, representing the weights of the items, separated by a space.

The third line shows the float, representing the total weight of items in the backpack, rounded off by two decimal points.

The fourth line displays the float values, representing the maximum value achievable for the given weight capacity, rounded off by two decimal points.


Refer to the sample outputs for the exact format.

Code constraints :
The given test cases fall under the following specifications:

Fixed the 4 items.

1 ≤ v, w ≤ 1000

1 ≤ W ≤100

Sample test cases :
Input 1 :
300 6
150 3
120 3
100 2
10
Output 1 :
Values: 300 150 120 100 
Weights: 6 3 3 2 
Total weight in bag: 10.00
Max value for 10 weight is 500.00
Input 2 :
100 10
280 40
120 20
120 24
60
Output 2 :
Values: 100 280 120 120 
Weights: 10 40 20 24 
Total weight in bag: 60.00
Max value for 60 weight is 440.00

=================================
         Program
=================================
#include<bits/stdc++.h>
using namespace std;
struct item{
    int v;
    int w;
    float d;
};
void input(item items[] ,int size){
    for(int i=0;i<size;i++){
        cin>>items[i].v;
        cin>>items[i].w;
    }
}
bool compare(const item &a,const item &b){
    return a.d > b.d;
}
void bubblesort(item items[], int sizeOfItems){
    for(int i=0;i<sizeOfItems-1;i++){
        for(int j=0;j<sizeOfItems-i-1;j++){
            if(items[j].d < items[j+1].d){
                swap(items[j],items[j+1]);
            }
        }
    }
}
float knapsack(item items[],int sizeOfItems,int w,float &totalweight){
    for(int i=0;i<sizeOfItems;i++){
        items[i].d = (float)items[i].v/items[i].w;
    }
    bubblesort(items,sizeOfItems);
    float totalvalue = 0;
    totalweight=0;
    for(int i=0;i<sizeOfItems;i++){
        if(totalweight + items[i].w <= w){
            totalvalue += items[i].v;
            totalweight += items[i].w;
        }
        else{
            float wt = w-totalweight;
            totalvalue += wt*items[i].d;
            totalweight += wt;
            break;
        }
    }
    return totalvalue;
}
int main(){
    int w;
    item items[4];
    input(items,4);
    cin>>w;
    item sorted[4];
    for(int i=0;i<4;i++)
      sorted[i] = items[i];
    float totalweight = 0;
    float max = knapsack(sorted,4,w,totalweight);
    cout<<"Values: ";
    for(int i=0;i<4;i++){
       cout<<items[i].v<<" ";
    }
    cout<<endl;
    cout<<"Weights: "; 
    for(int i=0;i<4;i++){
       cout<<items[i].w<<" ";
    }
    cout<<endl;
    cout<<"Total weight in bag: "<<fixed<<setprecision(2)<<totalweight<<endl;
    cout<<"Max value for "<<w<<" weight is "<<fixed<<setprecision(2)<<max<<endl;
    return 0;
}
